
 2 especially 0 - 10, 15, 16, 20, 30 - 32, 64
 2^4 = 16
 2^5 = 32
 2^6 = 64
 2^8 = 128
 2^9 = 512
 2^10 = 1024
 2^11 = 2048
 2^15 = 32768
 2^16 = 65536
 2^32 = 4294967296

 Сортировки

Сортировка с лямбда

#include <algorithm>
#include <functional>
O(N·log(N))
std::sort(s.begin(), s.end(), [](int a, int b) {
        return a > b;
    });

---
Multimap

#include <map>
std::multimap<std::string, std::string> m;
m.emplace("d", "ddd");

---
Битовые маски

	size_t getBit(size_t mask, size_t i) {
        return (mask >> i) & 1;
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result;
        
        for (size_t mask = 0; mask < 1 << nums.size(); ++mask) {
            vector<int> subset;
            for (size_t i = 0; i < nums.size(); ++i) {
                if (getBit(mask, i) == 1) {
                    subset.emplace_back(nums[i]);
                }
            }
            result.push_back(subset);
        }
        
        return result;
    }
---

Тесты
Edge case
---

Алгоритм Флойда поиска цикла

def floyd(f, x0):
    # Основная часть алгоритма: находим повторение x_i = x_2i.
    # Заяц движется вдвое быстрее черепахи,
    # и расстояние между ними увеличивается на единицу от шага к шагу.
    # Однажды они окажутся внутри цикла, и тогда расстояние между ними
    # будет делиться на λ.
    tortoise = f(x0) # f(x0) является элементом, следующим за x0.
    hare = f(f(x0))
    while tortoise != hare:
        tortoise = f(tortoise)
        hare = f(f(hare))
  
    # В этот момент позиция черепахи ν, 
    # которая равна расстоянию между черепахой и зайцем,
    # делится на период λ. Таким образом, заяц, двигаясь 
    # по кольцу на одну позицию за один раз, 
    # и черепаха, опять начавшая движение со стартовой точки x0 и
    # приближающаяся к кольцу, встретятся в начале кольца
    # Находим позицию μ встречи.    
    mu = 0
    tortoise = x0
    while tortoise != hare:
        tortoise = f(tortoise)
        hare = f(hare)   # Заяц и черепаха двигаются с одинаковой скоростью
        mu += 1
 
    # Находим длину кратчайшего цикла, начинающегося с позиции x_μ
    # Заяц движется на одну позицию вперёд, 
    # в то время как черепаха стоит на месте.
    lam = 1
    hare = f(tortoise)
    while tortoise != hare:
        hare = f(hare)
        lam += 1
 
    return lam, mu
---

Бинарный поиск 

int binarySearch(int arr[], int l, int r, int x) 
{ 
    if (r >= l) { 
        int mid = l + (r - l) / 2; 
  
        // If the element is present at the middle 
        // itself 
        if (arr[mid] == x) 
            return mid; 
  
        // If element is smaller than mid, then 
        // it can only be present in left subarray 
        if (arr[mid] > x) 
            return binarySearch(arr, l, mid - 1, x); 
  
        // Else the element can only be present 
        // in right subarray 
        return binarySearch(arr, mid + 1, r, x); 
    } 
  
    // We reach here when element is not 
    // present in array 
    return -1; 
} 
---

